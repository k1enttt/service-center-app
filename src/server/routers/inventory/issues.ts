/**
 * Issues Router - Stock issue (Phiếu Xuất Kho) management
 */

import { z } from "zod";
import { router, publicProcedure } from "../../trpc";
import { requireAnyAuthenticated, requireManagerOrAbove } from "../../middleware/requireRole";
import type { StockIssue, StockIssueWithRelations } from "@/types/inventory";

export const issuesRouter = router({
  /**
   * List issues with pagination and filters
   */
  list: publicProcedure.use(requireManagerOrAbove)
    .input(
      z.object({
        status: z
          .enum(["draft", "pending_approval", "approved", "completed", "cancelled"])
          .optional(),
        issueType: z
          .enum(["normal", "adjustment"]) // REDESIGNED: Simplified to 2 types
          .optional(),
        page: z.number().int().min(0).default(0),
        pageSize: z.number().int().min(1).max(100).default(10),
      })
    )
    .query(async ({ ctx, input }) => {
      let query = ctx.supabaseAdmin
        .from("stock_issues")
        .select(
          `
          *,
          created_by:profiles!created_by_id(id, full_name),
          approved_by:profiles!approved_by_id(id, full_name)
        `,
          { count: "exact" }
        );

      if (input.status) {
        query = query.eq("status", input.status);
      }

      if (input.issueType) {
        query = query.eq("issue_type", input.issueType);
      }

      const { data, error, count } = await query
        .order("created_at", { ascending: false })
        .range(input.page * input.pageSize, (input.page + 1) * input.pageSize - 1);

      if (error) {
        throw new Error(`Failed to list issues: ${error.message}`);
      }

      return {
        issues: data || [],
        total: count || 0,
        page: input.page,
        pageSize: input.pageSize,
        totalPages: Math.ceil((count || 0) / input.pageSize),
      };
    }),

  /**
   * Get single issue with full details
   */
  getById: publicProcedure.use(requireManagerOrAbove)
    .input(z.object({ id: z.string() }))
    .query(async ({ ctx, input }): Promise<StockIssueWithRelations | null> => {
      const { data, error } = await ctx.supabaseAdmin
        .from("stock_issues")
        .select(
          `
          *,
          items:stock_issue_items(
            *,
            product:products(id, name, sku),
            serials:stock_issue_serials(
              *,
              physical_product:physical_products(serial_number, warranty_end_date)
            )
          ),
          virtual_warehouse:virtual_warehouses!virtual_warehouse_id(id, name),
          created_by:profiles!created_by_id(id, full_name),
          approved_by:profiles!approved_by_id(id, full_name),
          completed_by:profiles!completed_by_id(id, full_name),
          ticket:service_tickets(id, ticket_number)
        `
        )
        .eq("id", input.id)
        .single();

      if (error) {
        if (error.code === "PGRST116") {
          return null;
        }
        throw new Error(`Failed to get issue: ${error.message}`);
      }

      // Query attachments separately (polymorphic relationship)
      const { data: attachments } = await ctx.supabaseAdmin
        .from("stock_document_attachments")
        .select("*")
        .eq("document_type", "issue")
        .eq("document_id", input.id);

      return {
        ...data,
        attachments: attachments || []
      } as StockIssueWithRelations;
    }),

  /**
   * Create new issue (draft)
   */
  create: publicProcedure.use(requireManagerOrAbove)
    .input(
      z.object({
        issueType: z.enum(["normal", "adjustment"]), // REDESIGNED: Simplified to 2 types
        virtualWarehouseId: z.string(), // REDESIGNED: Direct warehouse reference
        issueDate: z.string(),
        ticketId: z.string().optional(),
        rmaBatchId: z.string().optional(),
        referenceDocumentNumber: z.string().optional(),
        notes: z.string().optional(),
        autoGenerated: z.boolean().default(false),
        autoApproveThreshold: z.number().optional(),
        items: z.array(
          z.object({
            productId: z.string(),
            quantity: z.number().int(), // REDESIGNED: Can be negative for adjustments
            unitPrice: z.number().optional(),
            notes: z.string().optional(),
          })
        ).min(1),
      }).refine(
        (data) => {
          // Validate: normal issues must have positive quantities
          if (data.issueType === "normal") {
            return data.items.every((item) => item.quantity > 0);
          }
          // Adjustment issues: allow negative but not zero
          return data.items.every((item) => item.quantity !== 0);
        },
        {
          message: "Normal issues require positive quantities. Adjustments cannot have zero quantity.",
        }
      )
    )
    .mutation(async ({ ctx, input }) => {
      // Get user profile ID
      const { data: profile } = await ctx.supabaseAdmin
        .from("profiles")
        .select("id, role")
        .eq("user_id", ctx.user!.id)
        .single();

      if (!profile || !["admin", "manager"].includes(profile.role)) {
        throw new Error("Unauthorized: Only admin and manager can create issues");
      }

      // Insert issue
      const { data: issue, error: issueError } = await ctx.supabaseAdmin
        .from("stock_issues")
        .insert({
          issue_type: input.issueType,
          virtual_warehouse_id: input.virtualWarehouseId, // REDESIGNED: Direct warehouse reference
          issue_date: input.issueDate,
          ticket_id: input.ticketId,
          rma_batch_id: input.rmaBatchId,
          reference_document_number: input.referenceDocumentNumber,
          notes: input.notes,
          auto_generated: input.autoGenerated,
          auto_approve_threshold: input.autoApproveThreshold,
          status: "draft",
          created_by_id: profile.id,
        })
        .select()
        .single();

      if (issueError) {
        throw new Error(`Failed to create issue: ${issueError.message}`);
      }

      // Insert items
      if (input.items.length > 0) {
        const items = input.items.map((item) => ({
          issue_id: issue.id,
          product_id: item.productId,
          quantity: item.quantity,
          unit_price: item.unitPrice,
          notes: item.notes,
        }));

        const { error: itemsError } = await ctx.supabaseAdmin
          .from("stock_issue_items")
          .insert(items);

        if (itemsError) {
          throw new Error(`Failed to create issue items: ${itemsError.message}`);
        }
      }

      return issue;
    }),

  /**
   * Update issue (only if draft)
   */
  update: publicProcedure.use(requireManagerOrAbove)
    .input(
      z.object({
        id: z.string(),
        notes: z.string().optional(),
        referenceDocumentNumber: z.string().optional(),
      })
    )
    .mutation(async ({ ctx, input }) => {
      // Check status first
      const { data: issue } = await ctx.supabaseAdmin
        .from("stock_issues")
        .select("status, created_by_id")
        .eq("id", input.id)
        .single();

      if (!issue) {
        throw new Error("Issue not found");
      }

      if (issue.status !== "draft") {
        throw new Error("Cannot edit issue after draft status");
      }

      // Check permission
      const { data: profile } = await ctx.supabaseAdmin
        .from("profiles")
        .select("id, role")
        .eq("user_id", ctx.user!.id)
        .single();

      if (!profile) {
        throw new Error("Profile not found");
      }

      // Only creator or admin/manager can edit
      if (
        issue.created_by_id !== profile.id &&
        !["admin", "manager"].includes(profile.role)
      ) {
        throw new Error("Unauthorized to edit this issue");
      }

      const { data, error } = await ctx.supabaseAdmin
        .from("stock_issues")
        .update({
          notes: input.notes,
          reference_document_number: input.referenceDocumentNumber,
        })
        .eq("id", input.id)
        .select()
        .single();

      if (error) {
        throw new Error(`Failed to update issue: ${error.message}`);
      }

      return data;
    }),

  /**
   * Submit for approval
   */
  submitForApproval: publicProcedure.use(requireManagerOrAbove)
    .input(z.object({ id: z.string() }))
    .mutation(async ({ ctx, input }) => {
      const { data, error } = await ctx.supabaseAdmin
        .from("stock_issues")
        .update({ status: "pending_approval" })
        .eq("id", input.id)
        .eq("status", "draft")
        .select()
        .single();

      if (error) {
        throw new Error(`Failed to submit for approval: ${error.message}`);
      }

      return data;
    }),

  /**
   * Approve issue - Manager/Admin only
   */
  approve: publicProcedure.use(requireManagerOrAbove)
    .input(z.object({ id: z.string() }))
    .mutation(async ({ ctx, input }) => {
      // Get user profile ID
      const { data: profile } = await ctx.supabaseAdmin
        .from("profiles")
        .select("id, role")
        .eq("user_id", ctx.user!.id)
        .single();

      if (!profile || !["admin", "manager"].includes(profile.role)) {
        throw new Error("Unauthorized: Only admin and manager can approve issues");
      }

      const { data, error } = await ctx.supabaseAdmin
        .from("stock_issues")
        .update({
          status: "approved",
          approved_by_id: profile.id,
          approved_at: new Date().toISOString()
        })
        .eq("id", input.id)
        .eq("status", "pending_approval")
        .select()
        .single();

      if (error) {
        throw new Error(`Failed to approve issue: ${error.message}`);
      }

      return data;
    }),

  /**
   * Reject issue - Manager/Admin only
   */
  reject: publicProcedure.use(requireManagerOrAbove)
    .input(z.object({
      id: z.string(),
      reason: z.string().min(1, "Rejection reason is required")
    }))
    .mutation(async ({ ctx, input }) => {
      const { data, error } = await ctx.supabaseAdmin
        .from("stock_issues")
        .update({
          status: "cancelled",
          rejection_reason: input.reason
        })
        .eq("id", input.id)
        .eq("status", "pending_approval")
        .select()
        .single();

      if (error) {
        throw new Error(`Failed to reject issue: ${error.message}`);
      }

      return data;
    }),

  /**
   * Select serials for issue item
   * This selects existing physical products rather than creating new ones
   */
  selectSerials: publicProcedure.use(requireManagerOrAbove)
    .input(
      z.object({
        issueItemId: z.string(),
        physicalProductIds: z.array(z.string()),
      })
    )
    .mutation(async ({ ctx, input }) => {
      // Get issue item details
      const { data: issueItem } = await ctx.supabaseAdmin
        .from("stock_issue_items")
        .select("issue_id, product_id, quantity")
        .eq("id", input.issueItemId)
        .single();

      if (!issueItem) {
        throw new Error("Issue item not found");
      }

      // Get issue to check warehouse
      const { data: issue } = await ctx.supabaseAdmin
        .from("stock_issues")
        .select("virtual_warehouse_id, physical_warehouse_id")
        .eq("id", issueItem.issue_id)
        .single();

      if (!issue) {
        throw new Error("Issue not found");
      }

      // Validate physical products exist and belong to correct warehouse/product
      const { data: physicalProducts, error: validateError } = await ctx.supabaseAdmin
        .from("physical_products")
        .select("id, serial_number, product_id, virtual_warehouse_id, physical_warehouse_id")
        .in("id", input.physicalProductIds);

      if (validateError) {
        throw new Error(`Failed to validate physical products: ${validateError.message}`);
      }

      if (!physicalProducts || physicalProducts.length !== input.physicalProductIds.length) {
        throw new Error("Some physical products not found");
      }

      // Check all belong to correct product and warehouse
      const invalid = physicalProducts.filter(
        (p) =>
          p.product_id !== issueItem.product_id ||
          p.virtual_warehouse_id !== issue.virtual_warehouse_id ||
          (issue.physical_warehouse_id && p.physical_warehouse_id !== issue.physical_warehouse_id)
      );

      if (invalid.length > 0) {
        const serials = invalid.map((p) => p.serial_number).join(", ");
        throw new Error(
          `Physical products do not match issue warehouse/product: ${serials}`
        );
      }

      // Check not already issued
      const { data: existingIssues } = await ctx.supabaseAdmin
        .from("stock_issue_serials")
        .select("physical_product_id, serial_number")
        .in("physical_product_id", input.physicalProductIds);

      if (existingIssues && existingIssues.length > 0) {
        const duplicates = existingIssues.map((e) => e.serial_number).join(", ");
        throw new Error(`Physical products already issued: ${duplicates}`);
      }

      // Check quantity doesn't exceed declared quantity
      const { data: currentSerials } = await ctx.supabaseAdmin
        .from("stock_issue_serials")
        .select("id")
        .eq("issue_item_id", input.issueItemId);

      const currentCount = currentSerials?.length || 0;
      if (currentCount + input.physicalProductIds.length > issueItem.quantity) {
        throw new Error(
          `Cannot add ${input.physicalProductIds.length} serials. Would exceed declared quantity of ${issueItem.quantity}`
        );
      }

      // Insert issue serials
      const serialsToInsert = input.physicalProductIds.map((ppId) => {
        const pp = physicalProducts.find((p) => p.id === ppId);
        return {
          issue_item_id: input.issueItemId,
          physical_product_id: ppId,
          serial_number: pp!.serial_number,
        };
      });

      const { data, error } = await ctx.supabaseAdmin
        .from("stock_issue_serials")
        .insert(serialsToInsert)
        .select();

      if (error) {
        throw new Error(`Failed to add serials: ${error.message}`);
      }

      // Auto-complete: Check if all serials are complete
      // Get issue item to know issue_id
      const { data: issueItemForComplete } = await ctx.supabaseAdmin
        .from("stock_issue_items")
        .select("quantity, issue_id")
        .eq("id", input.issueItemId)
        .single();

      if (issueItemForComplete) {
        // Get issue status
        const { data: issueForComplete } = await ctx.supabaseAdmin
          .from("stock_issues")
          .select("status")
          .eq("id", issueItemForComplete.issue_id)
          .single();

        if (issueForComplete && issueForComplete.status === "approved") {
          // Get current serial count for this issue
          const { data: allItemsForComplete } = await ctx.supabaseAdmin
            .from("stock_issue_items")
            .select(`
              id,
              quantity,
              stock_issue_serials(id)
            `)
            .eq("issue_id", issueItemForComplete.issue_id);

          if (allItemsForComplete) {
            const totalQuantity = allItemsForComplete.reduce((sum, item) => sum + item.quantity, 0);
            const totalSerials = allItemsForComplete.reduce((sum, item) => sum + (item.stock_issue_serials?.length || 0), 0);

            // Auto-complete if all serials are selected
            if (totalSerials >= totalQuantity) {
              await ctx.supabaseAdmin
                .from("stock_issues")
                .update({
                  status: "completed",
                  completed_at: new Date().toISOString(),
                  completed_by_id: ctx.user?.id
                })
                .eq("id", issueItemForComplete.issue_id)
                .eq("status", "approved");
            }
          }
        }
      }

      return data;
    }),

  /**
   * Select serials by serial numbers (for manual input)
   * Accepts serial numbers as strings and finds matching physical products
   */
  selectSerialsByNumbers: publicProcedure.use(requireManagerOrAbove)
    .input(
      z.object({
        issueItemId: z.string(),
        serialNumbers: z.array(z.string()),
        virtualWarehouseId: z.string(),
      })
    )
    .mutation(async ({ ctx, input }) => {
      if (input.serialNumbers.length === 0) {
        throw new Error("No serial numbers provided");
      }

      // Get issue item details
      const { data: issueItem } = await ctx.supabaseAdmin
        .from("stock_issue_items")
        .select("issue_id, product_id, quantity")
        .eq("id", input.issueItemId)
        .single();

      if (!issueItem) {
        throw new Error("Issue item not found");
      }

      // Find physical products by serial numbers
      const { data: physicalProducts, error: findError } = await ctx.supabaseAdmin
        .from("physical_products")
        .select("id, serial_number, product_id, virtual_warehouse_id, issued_at")
        .eq("product_id", issueItem.product_id)
        .eq("virtual_warehouse_id", input.virtualWarehouseId)
        .in("serial_number", input.serialNumbers);

      if (findError) {
        throw new Error(`Failed to find serial numbers: ${findError.message}`);
      }

      // Check all serials were found
      const foundSerials = new Set(physicalProducts?.map(p => p.serial_number) || []);
      const notFound = input.serialNumbers.filter(sn => !foundSerials.has(sn));

      if (notFound.length > 0) {
        throw new Error(`Serial không tồn tại trong kho: ${notFound.join(", ")}`);
      }

      // Check none are already issued
      const alreadyIssued = physicalProducts.filter(p => p.issued_at !== null);
      if (alreadyIssued.length > 0) {
        const serials = alreadyIssued.map(p => p.serial_number).join(", ");
        throw new Error(`Serial đã được xuất kho: ${serials}`);
      }

      // Check not already in this or another issue
      const productIds = physicalProducts.map(p => p.id);
      const { data: existingIssues } = await ctx.supabaseAdmin
        .from("stock_issue_serials")
        .select("physical_product_id, serial_number")
        .in("physical_product_id", productIds);

      if (existingIssues && existingIssues.length > 0) {
        const duplicates = existingIssues.map(e => e.serial_number).join(", ");
        throw new Error(`Serial đã có trong phiếu xuất khác: ${duplicates}`);
      }

      // Check quantity doesn't exceed declared quantity
      const { data: currentSerials } = await ctx.supabaseAdmin
        .from("stock_issue_serials")
        .select("id")
        .eq("issue_item_id", input.issueItemId);

      const currentCount = currentSerials?.length || 0;
      if (currentCount + input.serialNumbers.length > issueItem.quantity) {
        throw new Error(
          `Không thể thêm ${input.serialNumbers.length} serial. Sẽ vượt quá số lượng khai báo ${issueItem.quantity}`
        );
      }

      // Insert issue serials
      const serialsToInsert = physicalProducts.map((pp) => ({
        issue_item_id: input.issueItemId,
        physical_product_id: pp.id,
        serial_number: pp.serial_number,
      }));

      const { data, error } = await ctx.supabaseAdmin
        .from("stock_issue_serials")
        .insert(serialsToInsert)
        .select();

      if (error) {
        throw new Error(`Failed to add serials: ${error.message}`);
      }

      // Auto-complete: Check if all serials are complete
      // Get issue item to know issue_id
      const { data: issueItemData } = await ctx.supabaseAdmin
        .from("stock_issue_items")
        .select("quantity, issue_id")
        .eq("id", input.issueItemId)
        .single();

      if (issueItemData) {
        // Get issue status
        const { data: issueData } = await ctx.supabaseAdmin
          .from("stock_issues")
          .select("status")
          .eq("id", issueItemData.issue_id)
          .single();

        if (issueData && issueData.status === "approved") {
          // Get current serial count for this issue
          const { data: allItems } = await ctx.supabaseAdmin
            .from("stock_issue_items")
            .select(`
              id,
              quantity,
              stock_issue_serials(id)
            `)
            .eq("issue_id", issueItemData.issue_id);

          if (allItems) {
            const totalQuantity = allItems.reduce((sum, item) => sum + item.quantity, 0);
            const totalSerials = allItems.reduce((sum, item) => sum + (item.stock_issue_serials?.length || 0), 0);

            // Auto-complete if all serials are selected
            if (totalSerials >= totalQuantity) {
              await ctx.supabaseAdmin
                .from("stock_issues")
                .update({
                  status: "completed",
                  completed_at: new Date().toISOString(),
                  completed_by_id: ctx.user?.id
                })
                .eq("id", issueItemData.issue_id)
                .eq("status", "approved");
            }
          }
        }
      }

      return data;
    }),

  /**
   * Remove serial from issue
   */
  removeSerial: publicProcedure.use(requireManagerOrAbove)
    .input(z.object({ serialId: z.string() }))
    .mutation(async ({ ctx, input }) => {
      const { error } = await ctx.supabaseAdmin
        .from("stock_issue_serials")
        .delete()
        .eq("id", input.serialId);

      if (error) {
        throw new Error(`Failed to remove serial: ${error.message}`);
      }

      return { success: true };
    }),

  /**
   * Get available serials for selection
   * Returns serials in specified warehouse that are not already issued
   */
  getAvailableSerials: publicProcedure.use(requireManagerOrAbove)
    .input(
      z.object({
        productId: z.string(),
        virtualWarehouseId: z.string(), // REDESIGNED: Direct warehouse reference
        search: z.string().optional(),
      })
    )
    .query(async ({ ctx, input }) => {
      // Query physical_products directly by virtual_warehouse_id
      let query = ctx.supabaseAdmin
        .from("physical_products")
        .select("id, serial_number, warranty_end_date, created_at")
        .eq("product_id", input.productId)
        .eq("virtual_warehouse_id", input.virtualWarehouseId)
        .is("issued_at", null); // Not issued yet

      if (input.search) {
        query = query.ilike("serial_number", `%${input.search}%`);
      }

      const { data, error } = await query
        .order("created_at", { ascending: true })
        .limit(100);

      if (error) {
        throw new Error(`Failed to get available serials: ${error.message}`);
      }

      return data || [];
    }),

  /**
   * Delete issue (only if draft)
   */
  delete: publicProcedure.use(requireManagerOrAbove)
    .input(z.object({ id: z.string() }))
    .mutation(async ({ ctx, input }) => {
      const { error } = await ctx.supabaseAdmin
        .from("stock_issues")
        .delete()
        .eq("id", input.id)
        .eq("status", "draft");

      if (error) {
        throw new Error(`Failed to delete issue: ${error.message}`);
      }

      return { success: true };
    }),
});
