#!/bin/bash

# Service Center - Instance Setup Script
# Automates steps 1.2, 1.4, 1.5, 1.6 from DEPLOYMENT.md
#
# Usage:
#   1. Edit the configuration variables below
#   2. Run: ./docker/scripts/setup-instance.sh

set -e

############################################
# CONFIGURATION - EDIT THESE VALUES
############################################

# Instance Information
CENTER_NAME="Service Center"
APP_PORT=3025
STUDIO_PORT=3000
SITE_URL="http://localhost:3025"
API_EXTERNAL_URL="http://localhost:3025"

# SMTP Configuration
SMTP_HOST="supabase-mail"
SMTP_PORT=2500
SMTP_USER="fake_mail_user"
SMTP_PASS="fake_mail_password"
SMTP_ADMIN_EMAIL="admin@example.com"
SMTP_SENDER_NAME="${CENTER_NAME}"

# Setup Password (leave empty to auto-generate)
SETUP_PASSWORD=""

############################################
# END CONFIGURATION
############################################

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Service Center - Instance Setup${NC}"
echo -e "${BLUE}=====================================${NC}"
echo ""

# Check if we're in the right directory
if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}‚ùå Error: docker-compose.yml not found${NC}"
    echo "Please run this script from the project root directory"
    exit 1
fi

# Check if .env already exists
if [ -f ".env" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: .env file already exists${NC}"
    read -p "Do you want to overwrite it? [y/N]: " overwrite
    if [ "$overwrite" != "y" ] && [ "$overwrite" != "Y" ]; then
        echo "Cancelled"
        exit 0
    fi
    echo ""
fi

echo -e "${BLUE}üìã Using configuration:${NC}"
echo "  Center Name: ${CENTER_NAME}"
echo "  App Port: ${APP_PORT}"
echo "  Studio Port: ${STUDIO_PORT}"
echo "  Site URL: ${SITE_URL}"
echo "  API External URL: ${API_EXTERNAL_URL}"
echo "  SMTP Host: ${SMTP_HOST}"
echo ""

# Step 1.2: Generate Secrets
echo -e "${BLUE}üîë Step 1.2: Generating secrets...${NC}"

if [ -z "$SETUP_PASSWORD" ]; then
    SETUP_PASSWORD=$(openssl rand -hex 16)
    echo -e "${GREEN}  ‚úì Generated SETUP_PASSWORD${NC}"
else
    echo -e "${GREEN}  ‚úì Using provided SETUP_PASSWORD${NC}"
fi

POSTGRES_PASSWORD=$(openssl rand -hex 32)
echo -e "${GREEN}  ‚úì Generated POSTGRES_PASSWORD${NC}"

JWT_SECRET=$(openssl rand -hex 32)
echo -e "${GREEN}  ‚úì Generated JWT_SECRET${NC}"

PG_META_CRYPTO_KEY=$(openssl rand -hex 32)
echo -e "${GREEN}  ‚úì Generated PG_META_CRYPTO_KEY${NC}"

VAULT_ENC_KEY=$(openssl rand -hex 32)
echo -e "${GREEN}  ‚úì Generated VAULT_ENC_KEY${NC}"

SECRET_KEY_BASE=$(openssl rand -hex 64)
echo -e "${GREEN}  ‚úì Generated SECRET_KEY_BASE${NC}"

LOGFLARE_PUBLIC_ACCESS_TOKEN=$(openssl rand -hex 32)
echo -e "${GREEN}  ‚úì Generated LOGFLARE_PUBLIC_ACCESS_TOKEN${NC}"

LOGFLARE_PRIVATE_ACCESS_TOKEN=$(openssl rand -hex 32)
echo -e "${GREEN}  ‚úì Generated LOGFLARE_PRIVATE_ACCESS_TOKEN${NC}"

DASHBOARD_PASSWORD=$(openssl rand -hex 16)
echo -e "${GREEN}  ‚úì Generated DASHBOARD_PASSWORD${NC}"

echo ""

# Step 1.4: Setup Volume Directories
echo -e "${BLUE}üì¶ Step 1.4: Setting up volume directories...${NC}"

# Copy configuration files from docs/references
if [ -d "docs/references/volumes" ]; then
    cp -r docs/references/volumes/* volumes/
    echo -e "${GREEN}  ‚úì Copied configuration files from docs/references/volumes${NC}"
else
    echo -e "${YELLOW}  ‚ö†Ô∏è  docs/references/volumes not found, skipping...${NC}"
fi

# Create runtime directories
mkdir -p volumes/db/data
mkdir -p volumes/storage
echo -e "${GREEN}  ‚úì Created runtime directories${NC}"

# Verify critical files
if [ -f "volumes/logs/vector.yml" ]; then
    echo -e "${GREEN}  ‚úì vector.yml OK${NC}"
else
    echo -e "${RED}  ‚ùå vector.yml MISSING${NC}"
    exit 1
fi

if [ -f "volumes/api/kong.yml" ]; then
    echo -e "${GREEN}  ‚úì kong.yml OK${NC}"
else
    echo -e "${RED}  ‚ùå kong.yml MISSING${NC}"
    exit 1
fi

echo ""

# Step 1.5: Configure .env
echo -e "${BLUE}‚öôÔ∏è  Step 1.5: Creating .env file...${NC}"

cat > .env <<EOF
# Environment Variables for Docker Deployment
# Generated by setup-instance.sh on $(date)

############################################
# Secrets
# YOU MUST CHANGE THESE BEFORE GOING INTO PRODUCTION
#
# IMPORTANT: Use hex format for all secrets (URL-safe)
# Generate with: openssl rand -hex <bytes>
# See DEPLOYMENT.md Step 1.2 for details
############################################

# Database
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

# JWT Secret (used to generate Supabase keys)
JWT_SECRET=${JWT_SECRET}

# Supabase Keys (generated from JWT_SECRET using generate-keys.js)
SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=

# Supabase Infrastructure
DASHBOARD_USERNAME=supabase
DASHBOARD_PASSWORD=${DASHBOARD_PASSWORD}
SECRET_KEY_BASE=${SECRET_KEY_BASE}
VAULT_ENC_KEY=${VAULT_ENC_KEY}
PG_META_CRYPTO_KEY=${PG_META_CRYPTO_KEY}

############################################
# Application Settings
############################################

# Setup password for /setup endpoint
SETUP_PASSWORD=${SETUP_PASSWORD}

# Application port (exposed to host)
APP_PORT=${APP_PORT}

############################################
# Database Configuration
############################################

POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_PORT=5432  # Internal port only (not exposed to host)
# default user is postgres

############################################
# Supavisor -- Database pooler
############################################

# Maximum number of PostgreSQL connections Supavisor opens per pool
POOLER_DEFAULT_POOL_SIZE=20
# Maximum number of client connections Supavisor accepts per pool
POOLER_MAX_CLIENT_CONN=100
# Unique tenant identifier
POOLER_TENANT_ID=service-center-${APP_PORT}
# Pool size for internal metadata storage used by Supavisor
POOLER_DB_POOL_SIZE=5

############################################
# API - Configuration for PostgREST
############################################

PGRST_DB_SCHEMAS=public,storage,graphql_public

############################################
# Auth - Configuration for GoTrue
############################################

## General
SITE_URL=${SITE_URL}
ADDITIONAL_REDIRECT_URLS=
JWT_EXPIRY=3600
DISABLE_SIGNUP=false
API_EXTERNAL_URL=${API_EXTERNAL_URL}

## Mailer Config
MAILER_URLPATHS_CONFIRMATION="/auth/v1/verify"
MAILER_URLPATHS_INVITE="/auth/v1/verify"
MAILER_URLPATHS_RECOVERY="/auth/v1/verify"
MAILER_URLPATHS_EMAIL_CHANGE="/auth/v1/verify"

## Email auth
ENABLE_EMAIL_SIGNUP=true
ENABLE_EMAIL_AUTOCONFIRM=true
SMTP_ADMIN_EMAIL=${SMTP_ADMIN_EMAIL}
SMTP_HOST=${SMTP_HOST}
SMTP_PORT=${SMTP_PORT}
SMTP_USER=${SMTP_USER}
SMTP_PASS=${SMTP_PASS}
SMTP_SENDER_NAME=${SMTP_SENDER_NAME}
ENABLE_ANONYMOUS_USERS=false

## Phone auth
ENABLE_PHONE_SIGNUP=true
ENABLE_PHONE_AUTOCONFIRM=true

############################################
# Studio Configuration
############################################

STUDIO_DEFAULT_ORGANIZATION=${CENTER_NAME}
STUDIO_DEFAULT_PROJECT=Production

# Studio port (exposed to host)
STUDIO_PORT=${STUDIO_PORT}

# replace if you intend to use Studio outside of localhost
SUPABASE_PUBLIC_URL=http://localhost:8000

# Enable webp support
IMGPROXY_ENABLE_WEBP_DETECTION=true

# Add your OpenAI API key to enable SQL Editor Assistant
OPENAI_API_KEY=

############################################
# Functions - Configuration for Functions
############################################

# NOTE: VERIFY_JWT applies to all functions. Per-function VERIFY_JWT is not supported yet.
FUNCTIONS_VERIFY_JWT=false

############################################
# Logs - Configuration for Analytics
############################################

# Change vector.toml sinks to reflect this change
# these cannot be the same value
LOGFLARE_PUBLIC_ACCESS_TOKEN=${LOGFLARE_PUBLIC_ACCESS_TOKEN}
LOGFLARE_PRIVATE_ACCESS_TOKEN=${LOGFLARE_PRIVATE_ACCESS_TOKEN}

# Docker socket location - this value will differ depending on your OS
DOCKER_SOCKET_LOCATION=/var/run/docker.sock

# Google Cloud Project details (optional - for BigQuery analytics)
GOOGLE_PROJECT_ID=GOOGLE_PROJECT_ID
GOOGLE_PROJECT_NUMBER=GOOGLE_PROJECT_NUMBER

############################################
# Next.js Application
############################################

# Public Supabase URL (for client-side)
# For internal Docker network, use: http://kong:8000
# For external/production, use your public URL
NEXT_PUBLIC_SUPABASE_URL=http://kong:8000

EOF

echo -e "${GREEN}  ‚úì .env file created${NC}"
echo ""

# Step 1.6: Install Dependencies & Generate API Keys
echo -e "${BLUE}üîß Step 1.6: Installing dependencies & generating API keys...${NC}"

# Check if node_modules exists
if [ ! -d "node_modules" ]; then
    echo -e "${BLUE}  ‚Üí Installing jsonwebtoken...${NC}"
    npm install jsonwebtoken
    echo -e "${GREEN}  ‚úì Dependencies installed${NC}"
else
    echo -e "${GREEN}  ‚úì Dependencies already installed${NC}"
fi

echo -e "${BLUE}  ‚Üí Generating Supabase API keys...${NC}"

# Generate API keys using the script
API_KEYS=$(node docker/scripts/generate-keys.js "${JWT_SECRET}" 2>&1)

# Extract keys from output
SUPABASE_ANON_KEY=$(echo "$API_KEYS" | grep "SUPABASE_ANON_KEY=" | cut -d'=' -f2)
SUPABASE_SERVICE_ROLE_KEY=$(echo "$API_KEYS" | grep "SUPABASE_SERVICE_ROLE_KEY=" | cut -d'=' -f2)

if [ -z "$SUPABASE_ANON_KEY" ] || [ -z "$SUPABASE_SERVICE_ROLE_KEY" ]; then
    echo -e "${RED}  ‚ùå Failed to generate API keys${NC}"
    echo "$API_KEYS"
    exit 1
fi

# Update .env with generated keys
sed -i "s|^SUPABASE_ANON_KEY=.*|SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}|" .env
sed -i "s|^SUPABASE_SERVICE_ROLE_KEY=.*|SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}|" .env

echo -e "${GREEN}  ‚úì API keys generated and added to .env${NC}"
echo ""

# Summary
echo -e "${GREEN}=====================================${NC}"
echo -e "${GREEN}‚úÖ Setup completed successfully!${NC}"
echo -e "${GREEN}=====================================${NC}"
echo ""
echo -e "${BLUE}üìã Summary:${NC}"
echo ""
echo -e "${BLUE}Instance Configuration:${NC}"
echo "  Center Name: ${CENTER_NAME}"
echo "  App Port: ${APP_PORT}"
echo "  Studio Port: ${STUDIO_PORT}"
echo "  Site URL: ${SITE_URL}"
echo ""
echo -e "${BLUE}Setup Password:${NC}"
echo "  ${SETUP_PASSWORD}"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  IMPORTANT: Save your setup password!${NC}"
echo ""
echo -e "${BLUE}Next Steps:${NC}"
echo ""
echo "  1. Review .env file: nano .env"
echo "  2. Build and start services:"
echo "     docker compose build"
echo "     docker compose up -d"
echo ""
echo "  3. Apply database schema:"
echo "     ./docker/scripts/apply-schema.sh"
echo ""
echo "  4. Access setup page:"
echo "     ${SITE_URL}/setup"
echo "     Use setup password: ${SETUP_PASSWORD}"
echo ""
echo -e "${GREEN}Happy deploying! üöÄ${NC}"
echo ""
